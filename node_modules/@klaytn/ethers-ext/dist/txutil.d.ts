import { Provider, TransactionResponse } from "@ethersproject/abstract-provider";
import { Signature } from "@ethersproject/bytes";
import { Deferrable } from "@ethersproject/properties";
import { SigningKey } from "@ethersproject/signing-key";
import { TransactionRequest } from "./types";
export declare function getTransactionRequest(transactionOrRLP: Deferrable<TransactionRequest> | string): Promise<TransactionRequest>;
export declare function resolveType(type?: number | string): number;
export declare function resolveTypeForKaikas(type?: string | number): string | number | undefined;
export declare function populateFromSync(tx: Deferrable<TransactionRequest>, expectedFrom: string | Promise<string>): void;
export declare function populateFrom(tx: TransactionRequest, expectedFrom: string): Promise<void>;
export declare function populateTo(tx: TransactionRequest, provider: Provider): Promise<void>;
export declare function populateNonce(tx: TransactionRequest, provider: Provider, fromAddress: string): Promise<void>;
export declare function populateGasLimit(tx: TransactionRequest, provider: Provider): Promise<void>;
export declare function populateGasPrice(tx: TransactionRequest, provider: Provider): Promise<void>;
export declare function eip155sign(key: SigningKey, digest: string, chainId: number): Signature;
export declare function populateChainId(tx: TransactionRequest, provider: Provider): Promise<void>;
export declare function populateFeePayerAndSignatures(tx: TransactionRequest, expectedFeePayer: string): Promise<void>;
export declare function pollTransactionInPool(txhash: string, provider: Provider): Promise<TransactionResponse>;
//# sourceMappingURL=txutil.d.ts.map